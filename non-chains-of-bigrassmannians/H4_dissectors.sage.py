

# This file was *autogenerated* from the file H4_dissectors.sage
from sage.all_cmdline import *   # import sage library

_sage_const_4 = Integer(4); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_8p3 = RealNumber('8.3')
W = CoxeterGroup(['H', _sage_const_4 ],implementation="coxeter3")  ### FIX W.bruhat_poset()
[s1,s2,s3,s4] = W.simple_reflections()

##################################################################################

n = rank(W)
w0 = W.long_element()
e = W([])


####### Kazhdan-Lusztig polynomials ##########################

# A faster implementation of KL-polynomials (using the optional package Coxeter 3) is given by this
# Fokko Duclouxâ€™s Coxeter3 C++ library.

# Had to install it: I just typed "sage -i coxeter3" in the terminal.

# It seems that one can direcly coerce from WeylGroup to CoxeterGroup and vice versa.
# I will therefore use CoxeterGroup to calculate KL-polynomials, but for all other Bruhat business I will use WeylGroup.

R = LaurentPolynomialRing(QQ, names=('q',)); (q,) = R._first_ngens(1)




def KLP(x,y):
    '''Returns the KL-polynomial, implemented in "Coxeter3" package by Fokko du Cloux.
    http://math.univ-lyon1.fr/~ducloux/coxeter/coxeter3/english/coxeter3_e.html'''
    
    if x not in W:
        x = convert_from_123(x)
    if y not in W:
        y = convert_from_123(y)
    
    return W.kazhdan_lusztig_polynomial(x,y)


def mu(w,x):
    '''Returns the KL mu-function with arguments w,x.
    By Humphrey's BGG book p. 175 and p. 169, for w<x we have:
    mu(x,w) = mu(w0*w,w0*x),
    mu(w,x) = dim Exit^1 (L_w,L_x) = dim Exit^1(L_x,L_w) = dim Exit^1(Delta_x,L_w).'''

    if w not in W:
        w = convert_from_123(w)
    if x not in W:
        x = convert_from_123(x)
        
    if w.bruhat_le(x):
        poly_dict = KLP(w,x).dict()       
        j = (x.length()-w.length()-_sage_const_1 )/_sage_const_2  
        if j not in poly_dict.keys():
            return _sage_const_0 
        return poly_dict[j]

    return _sage_const_0 


def DR(w):
    '''Returns the set of simple right descents of w.'''
    
    return {W.simple_reflections()[i] for i in w.descents()}


def DL(w):
    '''Returns the set of simple left   descents of w.'''
        
    return DR(w.inverse())


def AL(w):
    '''Returns the set of simple left ascends of w.'''
    
    DescLe = list(DL(w))
    AscLe = [s for s in W.simple_reflections() if s not in DescLe]
    return set(AscLe)


def AR(w):
    '''Returns the set of simple right ascends of w.'''
    
    DescRi = list(DR(w))
    AscRi = [s for s in W.simple_reflections() if s not in DescRi]
    return set(AscRi)



#### Coxeter non-Weyl group speciffic functions:

def bruhat_interval(x,y):
    '''A fix for W.bruhat_interval(), which does not work correctly for '''
    
    return [W(z) for z in W.bruhat_interval(x,y)]


def convert_to_123(w):
    '''E.g. s1*s2*s1 = [1, 2, 1] maps to "121".'''
    
    w = W(w)
    if w == e:
        return "e"
    return "".join([str(t) for t in list(w)])
    
    

############### BIGRASSMANNIANS ###############

bigrassmannians = [x for x in W if len(DR(x))==_sage_const_1  and len(DL(x))==_sage_const_1 ]
print("#bigrassmannians = %d"%len(bigrassmannians))
print("bigrassmannians = %s"%bigrassmannians)
print()








############### DISSECTORS ###############

def is_dissector(x):
    A = bruhat_interval(x,w0)
    B = [y for y in W if y not in A]
    for y in B:
        if set(B) == set(bruhat_interval(e,y)):
            return True
    return False

i=_sage_const_0 

dissectors = []
for x in bigrassmannians:
    if is_dissector(x):
        print("%s is a dissector!"%x)
        dissectors.append(x)

    print("%d/%d"%(i,len(bigrassmannians)))
    i += _sage_const_1 

print("***************************************************\n")

print("#dissectors = %d"%len(dissectors))
print("dissectors = %s"%dissectors)
print()



join_irreducibles = [x for x in dissectors]  # Works for type A, B, H, I.



f = open("H4_join_irreducibes.txt", "w")
f.write(str(dissectors))
f.close()





def f(x,y):
    return x.bruhat_le(y)

W_poset = Poset((list(W),f))






join_irreducibles = [x for x in dissectors]  # Works for type A, B, H, I.

############### PLOTTING NON-CHAINS OF BIGRASSMANNIANS ###############
# W_poset = W.bruhat_poset() does not work

badpairs = []
B = join_irreducibles
for i in range(_sage_const_1 ,n+_sage_const_1 ):
    for j in range(_sage_const_1 ,n+_sage_const_1 ):
        B_ij = [x for x in join_irreducibles if DL(x)=={W.simple_reflections()[i]} and DR(x)=={W.simple_reflections()[j]}]
        
        for x in B_ij:
            for y in B_ij:
                inter = bruhat_interval(x,y)
                if len([z for z in inter if z in B_ij])==_sage_const_2 :
                    
                    exists = _sage_const_0 
                    
                    for w in W:
                        if ( W.simple_reflections()[i]  not in DL(w) or W.simple_reflections()[j] not in DR(w)) and x.bruhat_le(w) and w.bruhat_le(y):
                            exists = _sage_const_1 
                            break
                    
#                    if exists == 1:
#                        print(convert_to_123(x),convert_to_123(y),"ok",convert_to_123(w))
                    if exists == _sage_const_0 :
                        badpairs.append((convert_to_123(x)+"(%d)"%x.length(),convert_to_123(y)+"(%d)"%y.length()))
                        print("%s-%s"%(convert_to_123(x),convert_to_123(y)))
             
            
default_vertex_color = "#fec7b8"
for i in range(_sage_const_1 ,n+_sage_const_1 ):
    for j in range(_sage_const_1 ,n+_sage_const_1 ):
        join_irreducibles_fixed = [x for x in join_irreducibles if DR(x)=={W.simple_reflections()[i]} and DL(x)=={W.simple_reflections()[j]}]
        if join_irreducibles_fixed != []:
            P = W_poset.subposet(join_irreducibles_fixed)
            if True: #not P.is_chain():
                Q = P.relabel(lambda x: convert_to_123(x)+"(%d)"%x.length())
                #colors =  { #"yellow" : [ Q(convert_to_123(x)) for x in bigrassmannians_fixed if x not in dissectors],
                           #"blue" : [ Q(convert_to_123(x)) for x in bigrassmannians_fixed if x not in join_irreducibles],
                          #default_vertex_color : [Q(convert_to_123(x)) for x in bigrassmannians_fixed if x in dissectors]}
                
                cov_lb = []
                for cov in Q.cover_relations():
                    a,b = cov
                    if (str(a),str(b)) in badpairs:
                        cov_lb.append(cov+["N"])
                    else:
                        cov_lb.append(cov+[""])
                
                cov_red = []
                cov_gray = []
                for cov in Q.cover_relations():
                    a,b = cov
                    if (str(a),str(b)) in badpairs or (str(b),str(a)) in badpairs:
                        cov_red.append(cov)
                    else:
                        cov_gray.append(cov)
                
                grap = Q.plot(figsize = _sage_const_8p3 ,cover_color="gray",element_shape = "s", cover_labels = cov_lb,
                              cover_colors = {"red" : cov_red, "gray" : cov_gray}) #element_colors = colors, 
                show(grap)
                
                if not os.path.isdir("posets"):  
                    os.mkdir("posets") 
                path = "posets/" + CartanType(W)[_sage_const_0 ]+str(CartanType(W)[_sage_const_1 ])
                if not os.path.isdir(path): 
                    os.mkdir(path)   
                    
                grap.save(path+'/J_%d%d.png'%(i,j))      
                print("*************************")                   
                    
 

